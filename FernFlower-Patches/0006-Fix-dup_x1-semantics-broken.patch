From 598767f5afbbc7771962a7b8eb586a1b726b493b Mon Sep 17 00:00:00 2001
From: Su5eD <su5ed@outlook.com>
Date: Sat, 1 May 2021 18:50:59 +0200
Subject: [PATCH] Fix 'dup_x1 semantics broken' (backport of commit 6606a47)

diff --git a/src/de/fernflower/modules/decompiler/sforms/SSAUConstructorSparseEx.java b/src/de/fernflower/modules/decompiler/sforms/SSAUConstructorSparseEx.java
index ef51e90..a31d8fa 100644
--- a/src/de/fernflower/modules/decompiler/sforms/SSAUConstructorSparseEx.java
+++ b/src/de/fernflower/modules/decompiler/sforms/SSAUConstructorSparseEx.java
@@ -247,45 +247,45 @@ public class SSAUConstructorSparseEx {
 		
 		SFormsFastMapDirect varmap = varmaparr[0];
 		
-//		// field access
-//		if(expr.type == Exprent.EXPRENT_FIELD) {
-//			
-//			int index;
-//			if(mapFieldVars.containsKey(expr.id)) {
-//				index = mapFieldVars.get(expr.id);
-//			} else {
-//				index = fieldvarcounter--;
-//				mapFieldVars.put(expr.id, index);
-//
-//				// ssu graph
-//				ssuversions.createNode(new VarVersionPaar(index, 1));
-//			}
-//			
-//			setCurrentVar(varmap, index, 1);
-//			
-//		} else if(expr.type == Exprent.EXPRENT_INVOCATION || 
-//				(expr.type == Exprent.EXPRENT_ASSIGNMENT && ((AssignmentExprent)expr).getLeft().type == Exprent.EXPRENT_FIELD) || 
-//				(expr.type == Exprent.EXPRENT_NEW && ((NewExprent)expr).getNewtype().type == CodeConstants.TYPE_OBJECT) ||
-//				expr.type == Exprent.EXPRENT_FUNCTION) {
-//			
-//			boolean ismmpp = true;
-//			
-//			if(expr.type == Exprent.EXPRENT_FUNCTION) {
-//				
-//				ismmpp = false;
-//				
-//				FunctionExprent fexpr = (FunctionExprent)expr;
-//				if(fexpr.getFunctype() >= FunctionExprent.FUNCTION_IMM && fexpr.getFunctype() <= FunctionExprent.FUNCTION_PPI) {
-//					if(fexpr.getLstOperands().get(0).type == Exprent.EXPRENT_FIELD) {
-//						ismmpp = true;
-//					}
-//				}
-//			}
-//			
-//			if(ismmpp) {
-//				varmap.removeAllFields();
-//			}
-//		}
+		// field access
+		if(expr.type == Exprent.EXPRENT_FIELD) {
+
+			int index;
+			if(mapFieldVars.containsKey(expr.id)) {
+				index = mapFieldVars.get(expr.id);
+			} else {
+				index = fieldvarcounter--;
+				mapFieldVars.put(expr.id, index);
+
+				// ssu graph
+				ssuversions.createNode(new VarVersionPaar(index, 1));
+			}
+
+			setCurrentVar(varmap, index, 1);
+
+		} else if(expr.type == Exprent.EXPRENT_INVOCATION || 
+				(expr.type == Exprent.EXPRENT_ASSIGNMENT && ((AssignmentExprent)expr).getLeft().type == Exprent.EXPRENT_FIELD) || 
+				(expr.type == Exprent.EXPRENT_NEW && ((NewExprent)expr).getNewtype().type == CodeConstants.TYPE_OBJECT) ||
+				expr.type == Exprent.EXPRENT_FUNCTION) {
+
+			boolean ismmpp = true;
+
+			if(expr.type == Exprent.EXPRENT_FUNCTION) {
+
+				ismmpp = false;
+
+				FunctionExprent fexpr = (FunctionExprent)expr;
+				if(fexpr.getFunctype() >= FunctionExprent.FUNCTION_IMM && fexpr.getFunctype() <= FunctionExprent.FUNCTION_PPI) {
+					if(fexpr.getLstOperands().get(0).type == Exprent.EXPRENT_FIELD) {
+						ismmpp = true;
+					}
+				}
+			}
+
+			if(ismmpp) {
+				varmap.removeAllFields();
+			}
+		}
 		
 		
 		if(varassign != null) {
-- 
2.29.2.windows.3

